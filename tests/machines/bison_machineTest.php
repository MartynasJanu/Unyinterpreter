<?php

namespace test_machines;

require_once 'test_machines/bison.php';
require_once 'src/UnyInterpreter/UnyRuleParser.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-15 at 01:21:23.
 */
class bison_machineTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var SqlMachine
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new bison();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers unyInterpreter\machines\Base\sql_machineBase::execute
     * @dataProvider getMysqlYY
     */
    public function testExecute($data)
    {
        return;
        $this->object->execute($data['input']);

        $this->assertEquals($data['unions'], $this->object->unions);
        $this->assertEquals($data['other_tokens'], $this->object->other_tokens);
        $this->assertEquals($data['types'], $this->object->types);
    }

    /**
     * @covers unyInterpreter\machines\Base\sql_machineBase::execute
     * @dataProvider getGrammar
     */
    public function testOther($data)
    {
        $this->object->execute($data['input']);

        if (isset($data['cdecl'])) {
            $this->assertEquals($data['cdecl'], $this->object->cdecl);
        }

        if (isset($data['unions'])) {
            $this->assertEquals($data['unions'], $this->object->unions);
        }

        if (isset($data['other_tokens'])) {
            $this->assertEquals($data['other_tokens'], $this->object->other_tokens);
        }

        if (isset($data['types'])) {
            $this->assertEquals($data['types'], $this->object->types);
        }

        if (isset($data['rules'])) {
            $this->assertEquals($data['rules'], $this->object->rules);
        }
    }

    public function getGrammar()
    {
        return [
            [
                [
                    'input' => '
                        %%
                        expseq:   /* empty */
                                | expseq1
                                ;

                        expseq1:  exp
                                | expseq1 \',\' exp
                                ;

                        opt_end_of_input:
                                  /* empty */
                                | END_OF_INPUT
                                ;

                        emptystringaction: { int a = 0;} ;
                        ',
                    'rules' => [
                        'expseq' => [
                            'components' => [
                                [
                                    'symbols' => [
                                        [
                                            'id' => '',
                                            'action' => '',
                                        ],
                                    ],
                                ],
                                [
                                    'symbols' => [
                                        [
                                            'id' => 'expseq1',
                                            'action' => '',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                        'expseq1' => [
                            'components' => [
                                [
                                    'symbols' => [
                                        [
                                            'id' => 'exp',
                                            'action' => '',
                                        ],
                                    ],
                                ],
                                [
                                    'symbols' => [
                                        [
                                            'id' => 'expseq1',
                                            'action' => '',
                                        ],
                                        [
                                            'id' => "','",
                                            'action' => '',
                                        ],
                                        [
                                            'id' => 'exp',
                                            'action' => '',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                        'opt_end_of_input' => [
                            'components' => [
                                [
                                    'symbols' => [
                                        [
                                            'id' => '',
                                            'action' => '',
                                        ],
                                    ],
                                ],
                                [
                                    'symbols' => [
                                        [
                                            'id' => 'END_OF_INPUT',
                                            'action' => '',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                        'emptystringaction' => [
                            'components' => [
                                    [
                                    'symbols' => [
                                        [
                                            'id' => '',
                                            'action' => ' int a = 0;',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            [
                [
                    'input' => '
                        /* c declaration */
                        %{
                            int x; /* X coordinate */
                            int y; /* Y coordinate */
                            int z; /* Z coordinate */
                            char* title;
                            double len; /* vector magnitude ; */
                        %}',
                    'cdecl' => '
                            int x; /* X coordinate */
                            int y; /* Y coordinate */
                            int z; /* Z coordinate */
                            char* title;
                            double len; /* vector magnitude ; */
                        ',
                ],
            ],
            [
                [
                    'input' => '
                        /* c declaration */
                        %{
                            int x; /* X coordinate */
                            int y; /* Y coordinate */
                            int z; /* Z coordinate */

                            char* title; /* some comments can be really nasty. */
                            /* For example if it has a %} symbol in it */

                            char* syntax_breaker = "this string is here
                            to ruin your tests /* */ %}";

                            double len; /* vector magnitude ; */
                        %}',
                    'cdecl' => '
                            int x; /* X coordinate */
                            int y; /* Y coordinate */
                            int z; /* Z coordinate */

                            char* title; /* some comments can be really nasty. */
                            /* For example if it has a %} symbol in it */

                            char* syntax_breaker = "this string is here
                            to ruin your tests /* */ %}";

                            double len; /* vector magnitude ; */
                        ',
                ],
            ],
            [
                [
                    'input' => '
                        /* union */
                        %union {
                            int x; /* X coordinate */
                            int y; /* Y coordinate */
                            int z; /* Z coordinate */
                            char* title;
                            double len; /* vector magnitude ; */
                        }',
                    'unions' => [
                        ['type' => 'int', 'id' => 'x'],
                        ['type' => 'int', 'id' => 'y'],
                        ['type' => 'int', 'id' => 'z'],
                        ['type' => 'char*', 'id' => 'title'],
                        ['type' => 'double', 'id' => 'len'],
                    ],
                ],
            ],
        ];
    }

    public function getMysqlYY()
    {
        return [
            [
                [
                    'input' => file_get_contents('data/mysql.yy'),
                    'unions' => [
                        ['type' => 'int', 'id' => 'num'],
                        ['type' => 'ulong', 'id' => 'ulong_num'],
                        ['type' => 'ulonglong', 'id' => 'ulonglong_number'],
                        ['type' => 'longlong', 'id' => 'longlong_number'],
                        ['type' => 'LEX_STRING', 'id' => 'lex_str'],
                        ['type' => 'LEX_STRING', 'id' => '*lex_str_ptr'],
                        ['type' => 'LEX_SYMBOL', 'id' => 'symbol'],
                        ['type' => 'Table_ident', 'id' => '*table'],
                        ['type' => 'char', 'id' => '*simple_string'],
                        ['type' => 'Item', 'id' => '*item'],
                        ['type' => 'Item_num', 'id' => '*item_num'],
                        ['type' => 'List<Item>', 'id' => '*item_list'],
                        ['type' => 'List<String>', 'id' => '*string_list'],
                        ['type' => 'String', 'id' => '*string'],
                        ['type' => 'Key_part_spec', 'id' => '*key_part'],
                        ['type' => 'TABLE_LIST', 'id' => '*table_list'],
                        ['type' => 'udf_func', 'id' => '*udf'],
                        ['type' => 'LEX_USER', 'id' => '*lex_user'],
                        ['type' => 'struct', 'id' => 'sys_var_with_base variable'],
                        ['type' => 'enum', 'id' => 'enum_var_type var_type'],
                        ['type' => 'Key::Keytype', 'id' => 'key_type'],
                        ['type' => 'enum', 'id' => 'ha_key_alg key_alg'],
                        ['type' => 'handlerton', 'id' => '*db_type'],
                        ['type' => 'enum', 'id' => 'row_type row_type'],
                        ['type' => 'enum', 'id' => 'ha_rkey_function ha_rkey_mode'],
                        ['type' => 'enum', 'id' => 'enum_tx_isolation tx_isolation'],
                        ['type' => 'enum', 'id' => 'Cast_target cast_type'],
                        ['type' => 'enum', 'id' => 'Item_udftype udf_type'],
                        ['type' => 'CHARSET_INFO', 'id' => '*charset'],
                        ['type' => 'thr_lock_type', 'id' => 'lock_type'],
                        ['type' => 'interval_type', 'id' => 'interval, interval_time_st'],
                        ['type' => 'timestamp_type', 'id' => 'date_time_type'],
                        ['type' => 'st_select_lex', 'id' => '*select_lex'],
                        ['type' => 'chooser_compare_func_creator', 'id' => 'boolfunc2creator'],
                        ['type' => 'struct', 'id' => 'sp_cond_type *spcondtype'],
                        ['type' => 'struct { int vars, conds, hndlrs, curs; }', 'id' => 'spblock'],
                        ['type' => 'sp_name', 'id' => '*spname'],
                        ['type' => 'LEX', 'id' => '*lex'],
                        ['type' => 'sp_head', 'id' => '*sphead'],
                        ['type' => 'struct', 'id' => 'p_elem_val *p_elem_value'],
                        ['type' => 'enum', 'id' => 'index_hint_type index_hint'],
                        ['type' => 'enum', 'id' => 'enum_filetype filetype'],
                        ['type' => 'enum', 'id' => 'Foreign_key::fk_option m_fk_option'],
                        ['type' => 'enum', 'id' => 'enum_yes_no_unknown m_yes_no_unk'],
                        ['type' => 'Diag_condition_item_name', 'id' => 'diag_condition_item_name'],
                        ['type' => 'Item_func_utc_extract::unit_spec', 'id' => 'utc_extract_unit'],
                        ['type' => 'bool', 'id' => 'is_not_empty'],
                    ],
                    'other_tokens' => [
                        ['key' => '%parse-param', 'value' => '{ class THD *YYTHD }'],
                        ['key' => '%lex-param', 'value' => '{ class THD *YYTHD }'],
                        ['key' => '%pure-parser', 'value' => ''],
                        ['key' => '%expect', 'value' => '172'],
                        ['key' => '%left', 'value' => 'JOIN_SYM INNER_SYM STRAIGHT_JOIN CROSS LEFT RIGHT'],
                        ['key' => '%left', 'value' => 'TABLE_REF_PRIORITY'],
                        ['key' => '%left', 'value' => 'SET_VAR'],
                        ['key' => '%left', 'value' => 'OR_OR_SYM OR_SYM OR2_SYM'],
                        ['key' => '%left', 'value' => 'XOR'],
                        ['key' => '%left', 'value' => 'AND_SYM AND_AND_SYM'],
                        ['key' => '%left', 'value' => 'BETWEEN_SYM CASE_SYM WHEN_SYM THEN_SYM ELSE'],
                        ['key' => '%left', 'value' => 'EQ EQUAL_SYM GE GT_SYM LE LT NE IS LIKE REGEXP IN_SYM'],
                        ['key' => '%left', 'value' => '\'|\''],
                        ['key' => '%left', 'value' => '\'&\''],
                        ['key' => '%left', 'value' => 'SHIFT_LEFT SHIFT_RIGHT'],
                        ['key' => '%left', 'value' => '\'-\' \'+\''],
                        ['key' => '%left', 'value' => '\'*\' \'/\' \'%\' DIV_SYM MOD_SYM'],
                        ['key' => '%left', 'value' => '\'^\''],
                        ['key' => '%left', 'value' => 'NEG \'~\''],
                        ['key' => '%right', 'value' => 'NOT_SYM NOT2_SYM'],
                        ['key' => '%right', 'value' => 'BINARY COLLATE_SYM'],
                        ['key' => '%left', 'value' => 'INTERVAL_SYM'],
                    ],
                    'types' => [
                        ['type' => 'lex_str', 'symbols' => preg_split('/\s+/', 'IDENT IDENT_QUOTED TEXT_STRING DECIMAL_NUM FLOAT_NUM NUM LONG_NUM HEX_NUM
                                LEX_HOSTNAME ULONGLONG_NUM field_ident select_alias ident ident_or_text
                                IDENT_sys TEXT_STRING_sys TEXT_STRING_literal
                                NCHAR_STRING opt_component key_cache_name
                                sp_opt_label BIN_NUM label_ident TEXT_STRING_filesystem ident_or_empty
                                opt_constraint constraint opt_ident engine_control_command')],
                        ['type' => 'lex_str_ptr', 'symbols' => ['opt_table_alias']],
                        ['type' => 'table', 'symbols' => preg_split('/\s+/', 'table_ident table_ident_nodb references xid
                                table_ident_opt_wild')],
                        ['type' => 'simple_string', 'symbols' => preg_split('/\s+/', 'remember_name remember_end opt_db text_or_password')],
                        ['type' => 'string', 'symbols' => preg_split('/\s+/', 'text_string opt_gconcat_separator')],
                        ['type' => 'num', 'symbols' => preg_split('/\s+/', 'type type_with_opt_collate int_type real_type order_dir lock_option
                                udf_type if_exists opt_local opt_table_options table_options
                                table_option opt_if_not_exists opt_no_write_to_binlog
                                opt_temporary all_or_any opt_distinct
                                opt_ignore_leaves fulltext_options spatial_type union_option
                                start_transaction_opts
                                union_opt select_derived_init option_type2
                                opt_natural_language_mode opt_query_expansion
                                opt_ev_status opt_ev_on_completion ev_on_completion opt_ev_comment
                                ev_alter_on_schedule_completion opt_ev_rename_to opt_ev_sql_stmt')],
                        ['type' => 'm_yes_no_unk', 'symbols' => ['opt_chain', 'opt_release']],
                        ['type' => 'm_fk_option', 'symbols' => ['delete_option']],
                        ['type' => 'ulong_num', 'symbols' => preg_split('/\s+/', 'ulong_num real_ulong_num merge_insert_types')],
                        ['type' => 'ulonglong_number', 'symbols' => preg_split('/\s+/', 'ulonglong_num real_ulonglong_num size_number')],
                        ['type' => 'lock_type', 'symbols' => preg_split('/\s+/', 'replace_lock_option opt_low_priority insert_lock_option load_data_lock')],
                        ['type' => 'item', 'symbols' => preg_split('/\s+/', 'literal text_literal insert_ident order_ident
                                simple_ident expr opt_expr opt_else sum_expr in_sum_expr
                                variable variable_aux bool_pri
                                predicate bit_expr
                                table_wild simple_expr udf_expr
                                expr_or_default set_expr_or_default
                                param_marker geometry_function
                                signed_literal now_or_signed_literal opt_escape
                                sp_opt_default
                                simple_ident_nospvar simple_ident_q
                                field_or_var limit_option
                                part_func_expr
                                function_call_keyword
                                function_call_nonkeyword
                                function_call_generic
                                function_call_conflict
                                signal_allowed_expr')],
                        ['type' => 'item_num', 'symbols' => ['NUM_literal']],
                        ['type' => 'item_list', 'symbols' => preg_split('/\s+/', 'expr_list opt_udf_expr_list udf_expr_list when_list
                                ident_list ident_list_arg opt_expr_list opt_expr_list_prec_comma')],
                        ['type' => 'var_type', 'symbols' => preg_split('/\s+/', 'option_type opt_var_type opt_var_ident_type')],
                        ['type' => 'key_type', 'symbols' => preg_split('/\s+/', 'normal_key_type opt_unique constraint_key_type fulltext spatial')],
                        ['type' => 'key_alg', 'symbols' => ['btree_or_rtree']],
                        ['type' => 'string_list', 'symbols' => ['using_list']],
                        ['type' => 'key_part', 'symbols' => ['key_part']],
                        ['type' => 'table_list', 'symbols' => preg_split('/\s+/', 'join_table_list  join_table
                                table_factor table_ref esc_table_ref
                                select_derived derived_table_list
                                select_derived_union')],
                        ['type' => 'date_time_type', 'symbols' => ['date_time_type']],
                        ['type' => 'interval', 'symbols' => ['interval']],
                        ['type' => 'utc_extract_unit', 'symbols' => ['interval_utc']],
                        ['type' => 'interval_time_st', 'symbols' => ['interval_time_stamp']],
                        ['type' => 'db_type', 'symbols' => ['storage_engines', 'known_storage_engines']],
                        ['type' => 'row_type', 'symbols' => preg_split('/\s+/', 'row_types')],
                        ['type' => 'tx_isolation', 'symbols' => preg_split('/\s+/', 'isolation_types')],
                        ['type' => 'ha_rkey_mode', 'symbols' => preg_split('/\s+/', 'handler_rkey_mode')],
                        ['type' => 'cast_type', 'symbols' => preg_split('/\s+/', 'cast_type')],
                        ['type' => 'symbol', 'symbols' => preg_split('/\s+/', 'keyword keyword_sp')],
                        ['type' => 'lex_user', 'symbols' => preg_split('/\s+/', 'user grant_user')],
                        ['type' => 'charset', 'symbols' => preg_split('/\s+/', 'opt_collate
                                charset_name
                                charset_name_or_default
                                old_or_new_charset_name
                                old_or_new_charset_name_or_default
                                collation_name
                                collation_name_or_default
                                opt_load_data_charset
                                UNDERSCORE_CHARSET')],
                        ['type' => 'variable', 'symbols' => preg_split('/\s+/', 'internal_variable_name')],
                        ['type' => 'select_lex', 'symbols' => preg_split('/\s+/', 'subselect
                                get_select_lex query_specification
                                query_expression_body')],
                        ['type' => 'boolfunc2creator', 'symbols' => ['comp_op']],
                        ['type' => 'NONE', 'symbols' => preg_split('/\s+/', 'query verb_clause create change select do drop insert replace insert2
                                insert_values update delete truncate rename
                                show describe load alter optimize keycache preload flush
                                reset purge begin commit rollback savepoint release
                                slave master_def master_defs master_file_def slave_until_opts
                                repair analyze check start checksum
                                field_list field_list_item field_spec kill column_def key_def
                                keycache_list keycache_list_or_parts assign_to_keycache
                                assign_to_keycache_parts
                                preload_list preload_list_or_parts preload_keys preload_keys_parts
                                select_item_list select_item values_list no_braces
                                opt_limit_clause delete_limit_clause fields opt_values values
                                procedure_list procedure_list2 procedure_item
                                handler
                                opt_precision opt_ignore opt_column opt_restrict
                                grant revoke set lock unlock string_list field_options field_option
                                field_opt_list opt_binary ascii unicode table_lock_list table_lock
                                ref_list opt_match_clause opt_on_update_delete use
                                opt_delete_options opt_delete_option varchar nchar nvarchar
                                opt_outer table_list table_name table_alias_ref_list table_alias_ref
                                opt_option opt_place
                                opt_attribute opt_attribute_list attribute column_list column_list_id
                                opt_column_list grant_privileges grant_ident grant_list grant_option
                                object_privilege object_privilege_list user_list rename_list
                                clear_privileges flush_options flush_option
                                opt_with_read_lock flush_options_list
                                equal optional_braces
                                opt_mi_check_type opt_to mi_check_types normal_join
                                table_to_table_list table_to_table opt_table_list opt_as
                                handler_rkey_function handler_read_or_scan
                                single_multi table_wild_list table_wild_one opt_wild
                                union_clause union_list
                                precision subselect_start opt_and charset
                                subselect_end select_var_list select_var_list_init help
                                field_length opt_field_length
                                opt_extended_describe
                                prepare prepare_src execute deallocate
                                statement sp_suid
                                sp_c_chistics sp_a_chistics sp_chistic sp_c_chistic xa
                                opt_field_or_var_spec fields_or_vars opt_load_data_set_spec
                                view_replace_or_algorithm view_replace
                                view_algorithm view_or_trigger_or_sp_or_event
                                definer_tail no_definer_tail
                                view_suid view_tail view_list_opt view_list view_select
                                view_check_option trigger_tail sp_tail sf_tail udf_tail event_tail
                                install uninstall partition_entry binlog_base64_event
                                init_key_options normal_key_options normal_key_opts all_key_opt
                                spatial_key_options fulltext_key_options normal_key_opt
                                fulltext_key_opt spatial_key_opt fulltext_key_opts spatial_key_opts
                                key_using_alg
                                part_column_list
                                server_def server_options_list server_option
                                definer_opt no_definer definer
                        END_OF_INPUT')],
                        ['type' => 'NONE', 'symbols' => preg_split('/\s+/', 'call sp_proc_stmts sp_proc_stmts1 sp_proc_stmt')],
                        ['type' => 'NONE', 'symbols' => preg_split('/\s+/', 'sp_proc_stmt_statement sp_proc_stmt_return')],
                        ['type' => 'NONE', 'symbols' => preg_split('/\s+/', 'sp_proc_stmt_if')],
                        ['type' => 'NONE', 'symbols' => preg_split('/\s+/', 'sp_labeled_control sp_proc_stmt_unlabeled')],
                        ['type' => 'NONE', 'symbols' => preg_split('/\s+/', 'sp_labeled_block sp_unlabeled_block')],
                        ['type' => 'NONE', 'symbols' => preg_split('/\s+/', 'sp_proc_stmt_leave')],
                        ['type' => 'NONE', 'symbols' => preg_split('/\s+/', 'sp_proc_stmt_iterate')],
                        ['type' => 'NONE', 'symbols' => preg_split('/\s+/', 'sp_proc_stmt_open sp_proc_stmt_fetch sp_proc_stmt_close')],
                        ['type' => 'NONE', 'symbols' => preg_split('/\s+/', 'case_stmt_specification simple_case_stmt searched_case_stmt')],
                        ['type' => 'num', 'symbols' => preg_split('/\s+/', 'sp_decl_idents sp_opt_inout sp_handler_type sp_hcond_list')],
                        ['type' => 'spcondtype', 'symbols' => preg_split('/\s+/', 'sp_cond sp_hcond sqlstate signal_value opt_signal_value')],
                        ['type' => 'spblock', 'symbols' => preg_split('/\s+/', 'sp_decls sp_decl')],
                        ['type' => 'lex', 'symbols' => preg_split('/\s+/', 'sp_cursor_stmt')],
                        ['type' => 'spname', 'symbols' => preg_split('/\s+/', 'sp_name')],
                        ['type' => 'index_hint', 'symbols' => preg_split('/\s+/', 'index_hint_type')],
                        ['type' => 'num', 'symbols' => preg_split('/\s+/', 'index_hint_clause')],
                        ['type' => 'filetype', 'symbols' => ['data_or_xml']],
                        ['type' => 'NONE', 'symbols' => ['signal_stmt', 'resignal_stmt']],
                        ['type' => 'diag_condition_item_name', 'symbols' => ['signal_condition_information_item_name']],
                        ['type' => 'NONE',
                            'symbols' => preg_split('/\s+/', "AND_SYM OR_SYM OR_OR_SYM BETWEEN_SYM CASE_SYM
                                THEN_SYM WHEN_SYM DIV_SYM MOD_SYM OR2_SYM AND_AND_SYM DELETE_SYM"),
                            'literals' => preg_split('/\s+/', "- + * / % ( ) , ! { } & |")],
                        ['type' => 'is_not_empty', 'symbols' => ['opt_union_order_or_limit']],
                    ],
                ],
            ],
        ];
    }
}
