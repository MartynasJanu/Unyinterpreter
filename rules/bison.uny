START
START
[whitespace]

LOOP START COMMENT
string:/* startComment
[any] pushComment
string:*/ endComment

START
C_DECL
string:%{
startCdecl

C_DECL
START
string:%}
stopCdecl

LOOP C_DECL C_DECL_COMMENT
string:/* pushCdecl
[any] pushCdecl
string:*/ pushCdecl

LOOP C_DECL C_DECL_STRING
string:" pushCdecl
[any] pushCdecl
string:" pushCdecl

C_DECL
C_DECL
[any]
pushCdecl

START
UNION
string:%union {
startUnion

LOOP UNION UNION_COMMENT
string:/*
[any]
string:*/

UNION
START
string:}
endUnion

UNION
UNION_STRUCT
regex:/\s+struct(\s*?)\{/
startUnionType

UNION
UNION_TYPE
[notwhitespace]
startUnionType

UNION
UNION
[any]

UNION_STRUCT
UNION_PREID
string:}
endUnionStruct

UNION_STRUCT
UNION_STRUCT
[any]
pushUnionType

UNION_TYPE
UNION_TYPE
[notwhitespace]
pushUnionType

UNION_TYPE
UNION_PREID
[whitespace]
endUnionType

UNION_PREID
UNION_PREID
[whitespace]

UNION_PREID
UNION_ID
[notwhitespace]
startUnionId

UNION_ID
UNION
string:;
endUnionId

UNION_ID
UNION_ID
[any]
pushUnionId

START
TOKEN_PRE
string:%token

TOKEN_PRE
TOKEN_PRE
[whitespace]

TOKEN_PRE
TOKEN
[notwhitespace]
startToken

TOKEN
START
[whitespace]
endToken

TOKEN
TOKEN
[any]
pushToken

START
TYPE_PRE
string:%type

TYPE_PRE
TYPE_PRE
[whitespace]

TYPE_PRE
TYPE
string:<
startType

TYPE
TYPE_POST
string:>
endType

TYPE
TYPE
[any]
pushType

TYPE_POST
TYPE_POST
[whitespace]

LOOP TYPE_POST TYPE_POST_COMMENT
string:/*
[any]
string:*/

TYPE_POST
START
string:%
endTypeSymbolNoConsume

TYPE_POST
TYPE_SYML
string:'
startTypeSymbolLiteral

TYPE_SYML
TYPE_POST
string:'
endTypeSymbolLiteral

TYPE_SYML
TYPE_SYML
[any]
pushTypeSymbolLiteral

TYPE_POST
START
string:;

TYPE_POST
TYPE_SYM
[notwhitespace]
startTypeSymbol

TYPE_SYM
TYPE_POST
regex:/([A-Za-z0-9_]+)/
pushTypeSymbol

TYPE_SYM
TYPE_POST
[whitespace]
endTypeSymbol

TYPE_POST
START
[any]
endTypeSymbolNoConsume

TYPE_SYM
START
[any]
endTypeSymbolNoConsume

START
OTHER_TOKEN
regex:/\%([a-zA-Z0-9-_]+)/
startOtherToken

OTHER_TOKEN
START
[newline]
endOtherToken

OTHER_TOKEN
OTHER_TOKEN
regex:/\s+\/\*(.*?)\*\//

OTHER_TOKEN
OTHER_TOKEN
[any]
pushOtherToken

START
GRAM
string:%%
startGram

GRAM
GRAM
[whitespace]

LOOP GRAM GRAM_COMMENT
string:/*
[any]
string:*/

LOOP GRAM GRAM_COMMENT_ONELINE
regex:/^\/\/(.*)/
[any]
[newline]

GRAM
GRAM_RULE
regex:/([a-zA-Z0-9_]+)\:/
startGramRule

LOOP GRAM_RULE GRAM_RULE_COMMENT
string:/*
[any]
string:*/

GRAM_RULE
GRAM_RULE
[whitespace]

GRAM_RULE
GRAM_RULE_AND
string:|
startGramRulePipe

GRAM_RULE
GRAM_RULE_ACTION_PROC
string:{
startGramRuleAction

GRAM_RULE
GRAM
string:;
endGramRule

GRAM_RULE
GRAM_RULE_SYMBOL
[notwhitespace]
startGramRuleSymbol

GRAM_RULE_AND
GRAM_RULE_AND
[whitespace]

GRAM_RULE_AND
GRAM_RULE_ACTION_PROC
string:{
startGramRuleAction

GRAM_RULE_AND
GRAM_RULE_SYMBOL
[notwhitespace]
startGramRuleSymbol

GRAM_RULE_SYMBOL
GRAM_RULE_AND
string:|
startGramRulePipe

GRAM_RULE_SYMBOL
GRAM_RULE_ACTION_PROC
string:{
startGramRuleAction

GRAM_RULE_SYMBOL
GRAM_RULE_SYMBOL
[notwhitespace]
pushGramRuleSymbol

GRAM_RULE_SYMBOL
GRAM_RULE
[whitespace]
endGramRuleSymbol

GRAM_RULE_SYMBOL
GRAM
string:;
endGramRule

LOOP GRAM_RULE_ACTION_PROC GRAM_RULE_ACTION_PROC_COMMENT
string:/* pushGramRuleAction
[any] pushGramRuleAction
string:*/ pushGramRuleAction

GRAM_RULE_ACTION_PROC
GRAM_RULE_ACTION
call:isGramRuleActionProcEnd

GRAM_RULE_ACTION_PROC
GRAM_RULE_ACTION_PROC
[any]
pushGramRuleAction

GRAM_RULE_ACTION
GRAM_RULE_ACTION
[whitespace]

GRAM_RULE_ACTION
GRAM_RULE_AND
string:|
startGramRulePipe

GRAM_RULE_ACTION
GRAM
string:;
endGramRule

GRAM_RULE_ACTION
GRAM_RULE_SYMBOL
[notwhitespace]
startGramRuleSymbol

GRAM
GRAM
[end]
end